import { useRef, useState, useEffect } from 'react';

function getFromWindow(varName) {
    return window[varName];
}
function useLibrary(varName, src, props = {}) {
    const library = useRef(getFromWindow(varName));
    const [status, setStatus] = useState(library.current ? 'load' : 'try');
    useEffect(()=>{
        if (status !== 'try') {
            return;
        }
        const el = document.createElement('script');
        el.src = src;
        Object.keys(props).forEach((k)=>{
            el[k] = props[k];
        });
        el.addEventListener('load', ()=>{
            library.current = getFromWindow(varName);
            setStatus(library.current ? 'load' : 'error');
        });
        el.addEventListener('error', ()=>setStatus('error')
        );
        el.addEventListener('abort', ()=>setStatus('abort')
        );
        document.body.appendChild(el);
        return ()=>{
            document.body.removeChild(el);
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps -- props might change every render
    }, [
        varName,
        src,
        status
    ]);
    const tryAgain = [
        'try',
        'load'
    ].includes(status) ? ()=>{
        return;
    } : ()=>setStatus('try')
    ;
    return [
        library.current,
        status,
        tryAgain
    ];
}

export { useLibrary };
