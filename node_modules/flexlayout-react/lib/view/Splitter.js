"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Splitter = void 0;
var React = require("react");
var DragDrop_1 = require("../DragDrop");
var Actions_1 = require("../model/Actions");
var BorderNode_1 = require("../model/BorderNode");
var Orientation_1 = require("../Orientation");
var Types_1 = require("../Types");
/** @hidden @internal */
var Splitter = function (props) {
    var layout = props.layout, node = props.node;
    var pBounds = React.useRef([]);
    var outlineDiv = React.useRef(undefined);
    var parentNode = node.getParent();
    var onMouseDown = function (event) {
        DragDrop_1.default.instance.startDrag(event, onDragStart, onDragMove, onDragEnd, onDragCancel, undefined, undefined, layout.getCurrentDocument(), layout.getRootDiv());
        pBounds.current = parentNode._getSplitterBounds(node, true);
        var rootdiv = layout.getRootDiv();
        outlineDiv.current = layout.getCurrentDocument().createElement("div");
        outlineDiv.current.style.position = "absolute";
        outlineDiv.current.className = layout.getClassName(Types_1.CLASSES.FLEXLAYOUT__SPLITTER_DRAG);
        outlineDiv.current.style.cursor = node.getOrientation() === Orientation_1.default.HORZ ? "ns-resize" : "ew-resize";
        node.getRect().positionElement(outlineDiv.current);
        rootdiv.appendChild(outlineDiv.current);
    };
    var onDragCancel = function (wasDragging) {
        var rootdiv = layout.getRootDiv();
        rootdiv.removeChild(outlineDiv.current);
    };
    var onDragStart = function () {
        return true;
    };
    var onDragMove = function (event) {
        var clientRect = layout.getDomRect();
        var pos = {
            x: event.clientX - clientRect.left,
            y: event.clientY - clientRect.top,
        };
        if (outlineDiv) {
            if (node.getOrientation() === Orientation_1.default.HORZ) {
                outlineDiv.current.style.top = getBoundPosition(pos.y - 4) + "px";
            }
            else {
                outlineDiv.current.style.left = getBoundPosition(pos.x - 4) + "px";
            }
        }
    };
    var onDragEnd = function () {
        var value = 0;
        if (outlineDiv) {
            if (node.getOrientation() === Orientation_1.default.HORZ) {
                value = outlineDiv.current.offsetTop;
            }
            else {
                value = outlineDiv.current.offsetLeft;
            }
        }
        if (parentNode instanceof BorderNode_1.default) {
            var pos = parentNode._calculateSplit(node, value);
            layout.doAction(Actions_1.default.adjustBorderSplit(node.getParent().getId(), pos));
        }
        else {
            var splitSpec = parentNode._calculateSplit(node, value);
            if (splitSpec !== undefined) {
                layout.doAction(Actions_1.default.adjustSplit(splitSpec));
            }
        }
        var rootdiv = layout.getRootDiv();
        rootdiv.removeChild(outlineDiv.current);
    };
    var getBoundPosition = function (p) {
        var bounds = pBounds.current;
        var rtn = p;
        if (p < bounds[0]) {
            rtn = bounds[0];
        }
        if (p > bounds[1]) {
            rtn = bounds[1];
        }
        return rtn;
    };
    var cm = layout.getClassName;
    var style = node._styleWithPosition({
        cursor: node.getOrientation() === Orientation_1.default.HORZ ? "ns-resize" : "ew-resize",
    });
    var className = cm(Types_1.CLASSES.FLEXLAYOUT__SPLITTER) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__SPLITTER_ + node.getOrientation().getName());
    if (parentNode instanceof BorderNode_1.default) {
        className += " " + cm(Types_1.CLASSES.FLEXLAYOUT__SPLITTER_BORDER);
    }
    else {
        if (node.getModel().getMaximizedTabset() !== undefined) {
            style.display = "none";
        }
    }
    return React.createElement("div", { style: style, onTouchStart: onMouseDown, onMouseDown: onMouseDown, className: className });
};
exports.Splitter = Splitter;
//# sourceMappingURL=Splitter.js.map