"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BorderButton = void 0;
var React = require("react");
var __1 = require("..");
var Actions_1 = require("../model/Actions");
var Rect_1 = require("../Rect");
var ICloseType_1 = require("../model/ICloseType");
var Types_1 = require("../Types");
/** @hidden @internal */
var BorderButton = function (props) {
    var layout = props.layout, node = props.node, selected = props.selected, border = props.border, iconFactory = props.iconFactory, titleFactory = props.titleFactory, icons = props.icons;
    var selfRef = React.useRef(null);
    var onMouseDown = function (event) {
        var message = layout.i18nName(__1.I18nLabel.Move_Tab, node.getName());
        props.layout.dragStart(event, message, node, node.isEnableDrag(), onClick, function (event2) { return undefined; });
    };
    var onClick = function () {
        layout.doAction(Actions_1.default.selectTab(node.getId()));
    };
    var isClosable = function () {
        var closeType = node.getCloseType();
        if (selected || closeType === ICloseType_1.ICloseType.Always) {
            return true;
        }
        if (closeType === ICloseType_1.ICloseType.Visible) {
            // not selected but x should be visible due to hover
            if (window.matchMedia && window.matchMedia("(hover: hover) and (pointer: fine)").matches) {
                return true;
            }
        }
        return false;
    };
    var onClose = function (event) {
        if (isClosable()) {
            layout.doAction(Actions_1.default.deleteTab(node.getId()));
        }
        else {
            onClick();
        }
    };
    var onCloseMouseDown = function (event) {
        event.stopPropagation();
    };
    React.useLayoutEffect(function () {
        updateRect();
    });
    var updateRect = function () {
        // record position of tab in border
        var clientRect = layout.getDomRect();
        var r = selfRef.current.getBoundingClientRect();
        node._setTabRect(new Rect_1.default(r.left - clientRect.left, r.top - clientRect.top, r.width, r.height));
    };
    var cm = layout.getClassName;
    var classNames = cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON_ + border);
    if (selected) {
        classNames += " " + cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON__SELECTED);
    }
    else {
        classNames += " " + cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON__UNSELECTED);
    }
    if (node.getClassName() !== undefined) {
        classNames += " " + node.getClassName();
    }
    var leadingContent = iconFactory ? iconFactory(node) : undefined;
    var titleContent = node.getName();
    var name = node.getName();
    function isTitleObject(obj) {
        return obj.titleContent !== undefined;
    }
    if (titleFactory !== undefined) {
        var titleObj = titleFactory(node);
        if (titleObj !== undefined) {
            if (typeof titleObj === "string") {
                titleContent = titleObj;
                name = titleObj;
            }
            else if (isTitleObject(titleObj)) {
                titleContent = titleObj.titleContent;
                name = titleObj.name;
            }
            else {
                titleContent = titleObj;
            }
        }
    }
    if (typeof leadingContent === undefined && typeof node.getIcon() !== undefined) {
        leadingContent = React.createElement("img", { src: node.getIcon(), alt: "leadingContent" });
    }
    var buttons = [];
    // allow customization of leading contents (icon) and contents
    var renderState = { leading: leadingContent, content: titleContent, name: name, buttons: buttons };
    layout.customizeTab(node, renderState);
    node._setRenderedName(renderState.name);
    var content = React.createElement("div", { className: cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON_CONTENT) }, renderState.content);
    var leading = React.createElement("div", { className: cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON_LEADING) }, renderState.leading);
    if (node.isEnableClose()) {
        var closeTitle = layout.i18nName(__1.I18nLabel.Close_Tab);
        buttons.push(React.createElement("div", { key: "close", title: closeTitle, className: cm(Types_1.CLASSES.FLEXLAYOUT__BORDER_BUTTON_TRAILING), onMouseDown: onCloseMouseDown, onClick: onClose, onTouchStart: onCloseMouseDown }, icons === null || icons === void 0 ? void 0 : icons.close));
    }
    return (React.createElement("div", { ref: selfRef, style: {}, className: classNames, onMouseDown: onMouseDown, onTouchStart: onMouseDown },
        leading,
        content,
        buttons));
};
exports.BorderButton = BorderButton;
//# sourceMappingURL=BorderButton.js.map