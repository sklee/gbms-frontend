"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabSet = void 0;
var React = require("react");
var I18nLabel_1 = require("../I18nLabel");
var Actions_1 = require("../model/Actions");
var PopupMenu_1 = require("../PopupMenu");
var TabButton_1 = require("./TabButton");
var TabOverflowHook_1 = require("./TabOverflowHook");
var Orientation_1 = require("../Orientation");
var Types_1 = require("../Types");
/** @hidden @internal */
var TabSet = function (props) {
    var node = props.node, layout = props.layout, iconFactory = props.iconFactory, titleFactory = props.titleFactory, icons = props.icons;
    var toolbarRef = React.useRef(null);
    var overflowbuttonRef = React.useRef(null);
    var tabbarInnerRef = React.useRef(null);
    var _a = TabOverflowHook_1.useTabOverflow(node, Orientation_1.default.HORZ, toolbarRef), selfRef = _a.selfRef, position = _a.position, userControlledLeft = _a.userControlledLeft, hiddenTabs = _a.hiddenTabs, onMouseWheel = _a.onMouseWheel;
    var onOverflowClick = function () {
        var element = overflowbuttonRef.current;
        PopupMenu_1.showPopup(layout.getRootDiv(), element, hiddenTabs, onOverflowItemSelect, layout.getClassName);
    };
    var onOverflowItemSelect = function (item) {
        layout.doAction(Actions_1.default.selectTab(item.node.getId()));
        userControlledLeft.current = false;
    };
    var onMouseDown = function (event) {
        var name = node.getName();
        if (name === undefined) {
            name = "";
        }
        else {
            name = ": " + name;
        }
        layout.doAction(Actions_1.default.setActiveTabset(node.getId()));
        var message = layout.i18nName(I18nLabel_1.I18nLabel.Move_Tabset, name);
        layout.dragStart(event, message, node, node.isEnableDrag(), function (event2) { return undefined; }, onDoubleClick);
    };
    var onInterceptMouseDown = function (event) {
        event.stopPropagation();
    };
    var onMaximizeToggle = function () {
        if (node.canMaximize()) {
            layout.maximize(node);
        }
    };
    var onFloatTab = function () {
        if (selectedTabNode !== undefined) {
            layout.doAction(Actions_1.default.floatTab(selectedTabNode.getId()));
        }
    };
    var onDoubleClick = function (event) {
        if (node.canMaximize()) {
            layout.maximize(node);
        }
    };
    // Start Render
    var cm = layout.getClassName;
    // tabbar inner can get shifted left via tab rename, this resets scrollleft to 0
    if (tabbarInnerRef.current !== null && tabbarInnerRef.current.scrollLeft !== 0) {
        tabbarInnerRef.current.scrollLeft = 0;
    }
    var selectedTabNode = node.getSelectedNode();
    var style = node._styleWithPosition();
    if (node.getModel().getMaximizedTabset() !== undefined && !node.isMaximized()) {
        style.display = "none";
    }
    var tabs = [];
    if (node.isEnableTabStrip()) {
        for (var i = 0; i < node.getChildren().length; i++) {
            var child = node.getChildren()[i];
            var isSelected = node.getSelected() === i;
            tabs.push(React.createElement(TabButton_1.TabButton, { layout: layout, node: child, key: child.getId(), selected: isSelected, show: true, height: node.getTabStripHeight(), iconFactory: iconFactory, titleFactory: titleFactory, icons: icons }));
        }
    }
    var buttons = [];
    // allow customization of header contents and buttons
    var renderState = { headerContent: node.getName(), buttons: buttons };
    layout.customizeTabSet(node, renderState);
    var headerContent = renderState.headerContent;
    buttons = renderState.buttons;
    var toolbar;
    if (hiddenTabs.length > 0) {
        var overflowTitle = layout.i18nName(I18nLabel_1.I18nLabel.Overflow_Menu_Tooltip);
        buttons.push(React.createElement("button", { key: "overflowbutton", ref: overflowbuttonRef, className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_BUTTON_OVERFLOW), title: overflowTitle, onClick: onOverflowClick, onMouseDown: onInterceptMouseDown, onTouchStart: onInterceptMouseDown }, icons === null || icons === void 0 ? void 0 :
            icons.more,
            hiddenTabs.length));
    }
    if (selectedTabNode !== undefined && layout.isSupportsPopout() && selectedTabNode.isEnableFloat() && !selectedTabNode.isFloating()) {
        var floatTitle = layout.i18nName(I18nLabel_1.I18nLabel.Float_Tab);
        buttons.push(React.createElement("button", { key: "float", title: floatTitle, className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON_FLOAT), onClick: onFloatTab, onMouseDown: onInterceptMouseDown, onTouchStart: onInterceptMouseDown }, icons === null || icons === void 0 ? void 0 : icons.popout));
    }
    if (node.canMaximize()) {
        var minTitle = layout.i18nName(I18nLabel_1.I18nLabel.Restore);
        var maxTitle = layout.i18nName(I18nLabel_1.I18nLabel.Maximize);
        buttons.push(React.createElement("button", { key: "max", title: node.isMaximized() ? minTitle : maxTitle, className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__TAB_TOOLBAR_BUTTON_ + (node.isMaximized() ? "max" : "min")), onClick: onMaximizeToggle, onMouseDown: onInterceptMouseDown, onTouchStart: onInterceptMouseDown }, node.isMaximized() ? icons === null || icons === void 0 ? void 0 : icons.restore : icons === null || icons === void 0 ? void 0 : icons.maximize));
    }
    toolbar = (React.createElement("div", { key: "toolbar", ref: toolbarRef, className: cm(Types_1.CLASSES.FLEXLAYOUT__TAB_TOOLBAR), onMouseDown: onInterceptMouseDown }, buttons));
    var showHeader = node.getName() !== undefined;
    var header;
    var tabStrip;
    var tabStripClasses = cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_OUTER);
    if (node.getClassNameTabStrip() !== undefined) {
        tabStripClasses += " " + node.getClassNameTabStrip();
    }
    tabStripClasses += " " + Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_OUTER_ + node.getTabLocation();
    if (node.isActive() && !showHeader) {
        tabStripClasses += " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_SELECTED);
    }
    if (node.isMaximized() && !showHeader) {
        tabStripClasses += " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_MAXIMIZED);
    }
    if (showHeader) {
        var tabHeaderClasses = cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_HEADER);
        if (node.isActive()) {
            tabHeaderClasses += " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_SELECTED);
        }
        if (node.isMaximized()) {
            tabHeaderClasses += " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_MAXIMIZED);
        }
        if (node.getClassNameHeader() !== undefined) {
            tabHeaderClasses += " " + node.getClassNameHeader();
        }
        header = (React.createElement("div", { className: tabHeaderClasses, style: { height: node.getHeaderHeight() + "px" }, onMouseDown: onMouseDown, onTouchStart: onMouseDown },
            React.createElement("div", { className: cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_HEADER_CONTENT) }, headerContent),
            toolbar));
        var tabStripStyle = { height: node.getTabStripHeight() + "px" };
        if (node.getTabLocation() === "top") {
            tabStripStyle["top"] = node.getHeaderHeight() + "px";
        }
        else {
            tabStripStyle["bottom"] = "0px";
        }
        tabStrip = (React.createElement("div", { className: tabStripClasses, style: tabStripStyle, onMouseDown: onMouseDown, onTouchStart: onMouseDown },
            React.createElement("div", { ref: tabbarInnerRef, className: cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_ + node.getTabLocation()) },
                React.createElement("div", { style: { left: position }, className: cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_TAB_CONTAINER) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_TAB_CONTAINER_ + node.getTabLocation()) }, tabs))));
    }
    else {
        var tabStripStyle = { height: node.getTabStripHeight() + "px" };
        if (node.getTabLocation() === "top") {
            tabStripStyle["top"] = "0px";
        }
        else {
            tabStripStyle["bottom"] = "0px";
        }
        tabStrip = (React.createElement("div", { className: tabStripClasses, style: tabStripStyle, onMouseDown: onMouseDown, onTouchStart: onMouseDown },
            React.createElement("div", { ref: tabbarInnerRef, className: cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_ + node.getTabLocation()) },
                React.createElement("div", { style: { left: position }, className: cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_TAB_CONTAINER) + " " + cm(Types_1.CLASSES.FLEXLAYOUT__TABSET_TABBAR_INNER_TAB_CONTAINER_ + node.getTabLocation()) }, tabs)),
            toolbar));
    }
    style = layout.styleFont(style);
    return (React.createElement("div", { ref: selfRef, style: style, className: cm(Types_1.CLASSES.FLEXLAYOUT__TABSET), onWheel: onMouseWheel },
        header,
        tabStrip));
};
exports.TabSet = TabSet;
//# sourceMappingURL=TabSet.js.map