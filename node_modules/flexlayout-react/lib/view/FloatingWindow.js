"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingWindow = void 0;
var React = require("react");
var react_dom_1 = require("react-dom");
var Types_1 = require("../Types");
/** @hidden @internal */
var FloatingWindow = function (props) {
    var title = props.title, id = props.id, url = props.url, rect = props.rect, onCloseWindow = props.onCloseWindow, onSetWindow = props.onSetWindow, children = props.children;
    var popoutWindow = React.useRef(null);
    var _a = React.useState(undefined), content = _a[0], setContent = _a[1];
    React.useLayoutEffect(function () {
        var r = rect;
        popoutWindow.current = window.open(url, id, "left=" + r.x + ",top=" + r.y + ",width=" + r.width + ",height=" + r.height);
        if (popoutWindow.current !== null) {
            onSetWindow(id, popoutWindow.current);
            // listen for parent unloading to remove all popouts
            window.addEventListener("beforeunload", function () {
                if (popoutWindow.current) {
                    popoutWindow.current.close();
                    popoutWindow.current = null;
                }
            });
            popoutWindow.current.addEventListener("load", function () {
                var popoutDocument = popoutWindow.current.document;
                popoutDocument.title = title;
                var popoutContent = popoutDocument.createElement("div");
                popoutContent.className = Types_1.CLASSES.FLEXLAYOUT__FLOATING_WINDOW_CONTENT;
                popoutDocument.body.appendChild(popoutContent);
                copyStyles(popoutDocument).then(function () {
                    setContent(popoutContent);
                });
                // listen for popout unloading (needs to be after load for safari)
                popoutWindow.current.addEventListener("beforeunload", function () {
                    onCloseWindow(id);
                });
            });
        }
        else {
            console.warn("Unable to open window " + url);
            onCloseWindow(id);
        }
        return function () {
            // delay so refresh will close window
            setTimeout(function () {
                if (popoutWindow.current) {
                    popoutWindow.current.close();
                    popoutWindow.current = null;
                }
            }, 0);
        };
    }, []);
    if (content !== undefined) {
        return react_dom_1.createPortal(children, content);
    }
    else {
        return null;
    }
};
exports.FloatingWindow = FloatingWindow;
/** @hidden @internal */
function copyStyles(doc) {
    var head = doc.head;
    var promises = [];
    Array.from(window.document.styleSheets).forEach(function (styleSheet) {
        if (styleSheet.href) {
            // prefer links since they will keep paths to images etc
            var styleElement_1 = doc.createElement("link");
            styleElement_1.type = styleSheet.type;
            styleElement_1.rel = "stylesheet";
            styleElement_1.href = styleSheet.href;
            head.appendChild(styleElement_1);
            promises.push(new Promise(function (resolve, reject) {
                styleElement_1.onload = function () { return resolve(true); };
            }));
        }
        else {
            try {
                var rules = styleSheet.cssRules;
                var style_1 = doc.createElement("style");
                Array.from(rules).forEach(function (cssRule) {
                    style_1.appendChild(doc.createTextNode(cssRule.cssText));
                });
                head.appendChild(style_1);
            }
            catch (e) {
                // styleSheet.cssRules can thro security exception
            }
        }
    });
    return Promise.all(promises);
}
//# sourceMappingURL=FloatingWindow.js.map